{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-02-09T05:51:07.926322Z","iopub.execute_input":"2023-02-09T05:51:07.926733Z","iopub.status.idle":"2023-02-09T05:51:07.968576Z","shell.execute_reply.started":"2023-02-09T05:51:07.926651Z","shell.execute_reply":"2023-02-09T05:51:07.967223Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/cpga-iq-placement/student_clustering.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/cpga-iq-placement/student_clustering.csv')","metadata":{"execution":{"iopub.status.busy":"2023-02-09T05:54:09.482261Z","iopub.execute_input":"2023-02-09T05:54:09.482749Z","iopub.status.idle":"2023-02-09T05:54:09.492430Z","shell.execute_reply.started":"2023-02-09T05:54:09.482712Z","shell.execute_reply":"2023-02-09T05:54:09.490636Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2023-02-09T05:54:27.252010Z","iopub.execute_input":"2023-02-09T05:54:27.253734Z","iopub.status.idle":"2023-02-09T05:54:27.263729Z","shell.execute_reply.started":"2023-02-09T05:54:27.253658Z","shell.execute_reply":"2023-02-09T05:54:27.262960Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   cgpa   iq\n0  5.13   88\n1  5.90  113\n2  8.36   93\n3  8.27   97\n4  5.45  110","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cgpa</th>\n      <th>iq</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.13</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.90</td>\n      <td>113</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.36</td>\n      <td>93</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.27</td>\n      <td>97</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.45</td>\n      <td>110</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.sample(163)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T05:56:15.822899Z","iopub.execute_input":"2023-02-09T05:56:15.823420Z","iopub.status.idle":"2023-02-09T05:56:15.840716Z","shell.execute_reply.started":"2023-02-09T05:56:15.823381Z","shell.execute_reply":"2023-02-09T05:56:15.838688Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"     cgpa   iq\n73   5.28   83\n116  8.25   95\n169  8.68  119\n126  8.08   98\n117  5.74  108\n..    ...  ...\n189  6.33  111\n178  4.99   88\n72   7.93   94\n192  4.76   89\n68   5.77  111\n\n[163 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cgpa</th>\n      <th>iq</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>73</th>\n      <td>5.28</td>\n      <td>83</td>\n    </tr>\n    <tr>\n      <th>116</th>\n      <td>8.25</td>\n      <td>95</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>8.68</td>\n      <td>119</td>\n    </tr>\n    <tr>\n      <th>126</th>\n      <td>8.08</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>5.74</td>\n      <td>108</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>189</th>\n      <td>6.33</td>\n      <td>111</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>4.99</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>7.93</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>192</th>\n      <td>4.76</td>\n      <td>89</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>5.77</td>\n      <td>111</td>\n    </tr>\n  </tbody>\n</table>\n<p>163 rows Ã— 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2023-02-09T05:55:01.542308Z","iopub.execute_input":"2023-02-09T05:55:01.542678Z","iopub.status.idle":"2023-02-09T05:55:01.567766Z","shell.execute_reply.started":"2023-02-09T05:55:01.542651Z","shell.execute_reply":"2023-02-09T05:55:01.566683Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 200 entries, 0 to 199\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   cgpa    200 non-null    float64\n 1   iq      200 non-null    int64  \ndtypes: float64(1), int64(1)\nmemory usage: 3.2 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2023-02-09T05:57:12.941440Z","iopub.execute_input":"2023-02-09T05:57:12.941783Z","iopub.status.idle":"2023-02-09T05:57:12.960155Z","shell.execute_reply.started":"2023-02-09T05:57:12.941757Z","shell.execute_reply":"2023-02-09T05:57:12.958749Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"             cgpa          iq\ncount  200.000000  200.000000\nmean     6.983400  101.995000\nstd      1.624101   12.161599\nmin      4.600000   83.000000\n25%      5.407500   91.000000\n50%      7.040000  102.000000\n75%      8.585000  113.000000\nmax      9.300000  121.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cgpa</th>\n      <th>iq</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>200.000000</td>\n      <td>200.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>6.983400</td>\n      <td>101.995000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.624101</td>\n      <td>12.161599</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>4.600000</td>\n      <td>83.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>5.407500</td>\n      <td>91.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>7.040000</td>\n      <td>102.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>8.585000</td>\n      <td>113.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9.300000</td>\n      <td>121.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-02-09T05:58:06.392136Z","iopub.execute_input":"2023-02-09T05:58:06.392525Z","iopub.status.idle":"2023-02-09T05:58:06.402636Z","shell.execute_reply.started":"2023-02-09T05:58:06.392492Z","shell.execute_reply":"2023-02-09T05:58:06.401188Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"cgpa    0\niq      0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2023-02-09T05:58:46.581294Z","iopub.execute_input":"2023-02-09T05:58:46.581705Z","iopub.status.idle":"2023-02-09T05:58:46.591343Z","shell.execute_reply.started":"2023-02-09T05:58:46.581673Z","shell.execute_reply":"2023-02-09T05:58:46.590370Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"7"},"metadata":{}}]},{"cell_type":"code","source":"df. drop_duplicates(keep=False)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:06:13.547146Z","iopub.execute_input":"2023-02-09T06:06:13.547537Z","iopub.status.idle":"2023-02-09T06:06:13.561924Z","shell.execute_reply.started":"2023-02-09T06:06:13.547495Z","shell.execute_reply":"2023-02-09T06:06:13.561013Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"     cgpa   iq\n0    5.13   88\n1    5.90  113\n2    8.36   93\n3    8.27   97\n4    5.45  110\n..    ...  ...\n195  4.68   89\n196  8.57  118\n197  5.85  112\n198  6.23  108\n199  8.82  117\n\n[186 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cgpa</th>\n      <th>iq</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.13</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.90</td>\n      <td>113</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.36</td>\n      <td>93</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.27</td>\n      <td>97</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.45</td>\n      <td>110</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>195</th>\n      <td>4.68</td>\n      <td>89</td>\n    </tr>\n    <tr>\n      <th>196</th>\n      <td>8.57</td>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>197</th>\n      <td>5.85</td>\n      <td>112</td>\n    </tr>\n    <tr>\n      <th>198</th>\n      <td>6.23</td>\n      <td>108</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>8.82</td>\n      <td>117</td>\n    </tr>\n  </tbody>\n</table>\n<p>186 rows Ã— 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:06:34.022113Z","iopub.execute_input":"2023-02-09T06:06:34.022510Z","iopub.status.idle":"2023-02-09T06:06:34.032158Z","shell.execute_reply.started":"2023-02-09T06:06:34.022480Z","shell.execute_reply":"2023-02-09T06:06:34.031408Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"7"},"metadata":{}}]},{"cell_type":"code","source":"df.drop_duplicates(inplace = True)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(pd.options.display.max_rows) ","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:13:19.302074Z","iopub.execute_input":"2023-02-09T06:13:19.302455Z","iopub.status.idle":"2023-02-09T06:13:19.309634Z","shell.execute_reply.started":"2023-02-09T06:13:19.302429Z","shell.execute_reply":"2023-02-09T06:13:19.308475Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"60\n","output_type":"stream"}]},{"cell_type":"code","source":"#eda ","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:30:26.535213Z","iopub.execute_input":"2023-02-09T06:30:26.535713Z","iopub.status.idle":"2023-02-09T06:30:26.542362Z","shell.execute_reply.started":"2023-02-09T06:30:26.535676Z","shell.execute_reply":"2023-02-09T06:30:26.540359Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndf.plot()\n\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:18:34.402877Z","iopub.execute_input":"2023-02-09T06:18:34.403447Z","iopub.status.idle":"2023-02-09T06:18:34.646808Z","shell.execute_reply.started":"2023-02-09T06:18:34.403404Z","shell.execute_reply":"2023-02-09T06:18:34.645331Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('/kaggle/input/cpga-iq-placement/student_clustering.csv')\n\ndf.plot(kind = 'scatter', x = 'cgpa', y = 'iq')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:21:16.762337Z","iopub.execute_input":"2023-02-09T06:21:16.764352Z","iopub.status.idle":"2023-02-09T06:21:16.924955Z","shell.execute_reply.started":"2023-02-09T06:21:16.764298Z","shell.execute_reply":"2023-02-09T06:21:16.923016Z"},"trusted":true},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:29:26.415647Z","iopub.execute_input":"2023-02-09T06:29:26.416172Z","iopub.status.idle":"2023-02-09T06:29:26.425685Z","shell.execute_reply.started":"2023-02-09T06:29:26.416119Z","shell.execute_reply":"2023-02-09T06:29:26.423856Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"(200, 2)"},"metadata":{}}]},{"cell_type":"code","source":"plt.scatter(df['cgpa'],df['iq'])","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:32:13.403983Z","iopub.execute_input":"2023-02-09T06:32:13.404425Z","iopub.status.idle":"2023-02-09T06:32:13.549065Z","shell.execute_reply.started":"2023-02-09T06:32:13.404385Z","shell.execute_reply":"2023-02-09T06:32:13.548291Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"<matplotlib.collections.PathCollection at 0x7f0132405f50>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"x=df.iloc[:,0:1]\ny=df.iloc[:,-1]","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:41:41.807374Z","iopub.execute_input":"2023-02-09T06:41:41.807834Z","iopub.status.idle":"2023-02-09T06:41:41.814757Z","shell.execute_reply.started":"2023-02-09T06:41:41.807795Z","shell.execute_reply":"2023-02-09T06:41:41.813083Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"x","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:41:49.206981Z","iopub.execute_input":"2023-02-09T06:41:49.207527Z","iopub.status.idle":"2023-02-09T06:41:49.235660Z","shell.execute_reply.started":"2023-02-09T06:41:49.207486Z","shell.execute_reply":"2023-02-09T06:41:49.234174Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"     cgpa\n0    5.13\n1    5.90\n2    8.36\n3    8.27\n4    5.45\n5    5.88\n6    8.41\n7    8.80\n8    5.79\n9    8.09\n10   4.60\n11   6.10\n12   8.16\n13   5.00\n14   5.71\n15   8.31\n16   5.50\n17   7.87\n18   6.05\n19   5.84\n20   7.47\n21   4.86\n22   7.78\n23   4.78\n24   4.96\n25   7.93\n26   4.86\n27   9.18\n28   8.04\n29   5.43\n30   8.86\n31   6.01\n32   8.83\n33   5.32\n34   7.77\n35   8.00\n36   8.56\n37   5.91\n38   5.44\n39   5.57\n40   5.34\n41   8.43\n42   8.02\n43   5.31\n44   8.96\n45   8.78\n46   8.14\n47   6.40\n48   8.45\n49   5.67\n50   5.14\n51   4.95\n52   8.79\n53   8.12\n54   8.81\n55   6.05\n56   5.85\n57   8.88\n58   5.87\n59   9.07\n60   6.02\n61   8.34\n62   8.65\n63   8.92\n64   5.21\n65   8.75\n66   8.53\n67   4.91\n68   5.77\n69   8.29\n70   6.06\n71   8.71\n72   7.93\n73   5.28\n74   5.55\n75   8.86\n76   5.81\n77   9.30\n78   5.15\n79   8.72\n80   8.14\n81   9.01\n82   5.47\n83   4.90\n84   8.97\n85   4.89\n86   9.00\n87   5.74\n88   8.76\n89   5.80\n90   8.78\n91   9.23\n92   8.20\n93   5.05\n94   8.67\n95   8.18\n96   9.03\n97   8.61\n98   4.98\n99   9.13\n100  5.88\n101  5.01\n102  4.95\n103  8.91\n104  4.96\n105  4.85\n106  7.99\n107  4.76\n108  8.98\n109  9.03\n110  8.08\n111  8.86\n112  5.91\n113  5.67\n114  8.26\n115  8.89\n116  8.25\n117  5.74\n118  8.97\n119  4.98\n120  4.78\n121  5.69\n122  8.40\n123  8.72\n124  7.84\n125  5.20\n126  8.08\n127  6.05\n128  5.05\n129  8.25\n130  8.30\n131  6.14\n132  5.01\n133  4.77\n134  5.74\n135  8.93\n136  5.94\n137  4.68\n138  7.90\n139  7.97\n140  8.21\n141  4.81\n142  5.86\n143  5.03\n144  4.98\n145  8.58\n146  5.32\n147  8.94\n148  6.38\n149  4.86\n150  8.60\n151  4.89\n152  8.77\n153  8.81\n154  4.88\n155  8.23\n156  6.61\n157  8.54\n158  6.04\n159  8.35\n160  5.01\n161  8.97\n162  6.24\n163  8.33\n164  8.91\n165  4.67\n166  6.10\n167  5.15\n168  4.97\n169  8.68\n170  9.06\n171  5.80\n172  8.90\n173  4.87\n174  5.20\n175  8.46\n176  8.94\n177  5.87\n178  4.99\n179  8.91\n180  8.91\n181  5.97\n182  6.17\n183  6.01\n184  7.89\n185  4.79\n186  7.91\n187  8.23\n188  8.95\n189  6.33\n190  8.40\n191  8.44\n192  4.76\n193  4.78\n194  8.79\n195  4.68\n196  8.57\n197  5.85\n198  6.23\n199  8.82","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cgpa</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.13</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.90</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.36</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.27</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.45</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5.88</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8.41</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8.80</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>5.79</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>8.09</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>4.60</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>6.10</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>8.16</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>5.00</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>5.71</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>8.31</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>5.50</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>7.87</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>6.05</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>5.84</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>7.47</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>4.86</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>7.78</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>4.78</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>4.96</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>7.93</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>4.86</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>9.18</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>8.04</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>5.43</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>8.86</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>6.01</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>8.83</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>5.32</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>7.77</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>8.56</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>5.91</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>5.44</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>5.57</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>5.34</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>8.43</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>8.02</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>5.31</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>8.96</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>8.78</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>8.14</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>6.40</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>8.45</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>5.67</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>5.14</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>4.95</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>8.79</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>8.12</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>8.81</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>6.05</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>5.85</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>8.88</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>5.87</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>9.07</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>6.02</td>\n    </tr>\n    <tr>\n      <th>61</th>\n      <td>8.34</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>8.65</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>8.92</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>5.21</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>8.75</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>8.53</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>4.91</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>5.77</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>8.29</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>6.06</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>8.71</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>7.93</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>5.28</td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <td>5.55</td>\n    </tr>\n    <tr>\n      <th>75</th>\n      <td>8.86</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>5.81</td>\n    </tr>\n    <tr>\n      <th>77</th>\n      <td>9.30</td>\n    </tr>\n    <tr>\n      <th>78</th>\n      <td>5.15</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>8.72</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>8.14</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>9.01</td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>5.47</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>4.90</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>8.97</td>\n    </tr>\n    <tr>\n      <th>85</th>\n      <td>4.89</td>\n    </tr>\n    <tr>\n      <th>86</th>\n      <td>9.00</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>5.74</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>8.76</td>\n    </tr>\n    <tr>\n      <th>89</th>\n      <td>5.80</td>\n    </tr>\n    <tr>\n      <th>90</th>\n      <td>8.78</td>\n    </tr>\n    <tr>\n      <th>91</th>\n      <td>9.23</td>\n    </tr>\n    <tr>\n      <th>92</th>\n      <td>8.20</td>\n    </tr>\n    <tr>\n      <th>93</th>\n      <td>5.05</td>\n    </tr>\n    <tr>\n      <th>94</th>\n      <td>8.67</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>8.18</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>9.03</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>8.61</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>4.98</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>9.13</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>5.88</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>5.01</td>\n    </tr>\n    <tr>\n      <th>102</th>\n      <td>4.95</td>\n    </tr>\n    <tr>\n      <th>103</th>\n      <td>8.91</td>\n    </tr>\n    <tr>\n      <th>104</th>\n      <td>4.96</td>\n    </tr>\n    <tr>\n      <th>105</th>\n      <td>4.85</td>\n    </tr>\n    <tr>\n      <th>106</th>\n      <td>7.99</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>4.76</td>\n    </tr>\n    <tr>\n      <th>108</th>\n      <td>8.98</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>9.03</td>\n    </tr>\n    <tr>\n      <th>110</th>\n      <td>8.08</td>\n    </tr>\n    <tr>\n      <th>111</th>\n      <td>8.86</td>\n    </tr>\n    <tr>\n      <th>112</th>\n      <td>5.91</td>\n    </tr>\n    <tr>\n      <th>113</th>\n      <td>5.67</td>\n    </tr>\n    <tr>\n      <th>114</th>\n      <td>8.26</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>8.89</td>\n    </tr>\n    <tr>\n      <th>116</th>\n      <td>8.25</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>5.74</td>\n    </tr>\n    <tr>\n      <th>118</th>\n      <td>8.97</td>\n    </tr>\n    <tr>\n      <th>119</th>\n      <td>4.98</td>\n    </tr>\n    <tr>\n      <th>120</th>\n      <td>4.78</td>\n    </tr>\n    <tr>\n      <th>121</th>\n      <td>5.69</td>\n    </tr>\n    <tr>\n      <th>122</th>\n      <td>8.40</td>\n    </tr>\n    <tr>\n      <th>123</th>\n      <td>8.72</td>\n    </tr>\n    <tr>\n      <th>124</th>\n      <td>7.84</td>\n    </tr>\n    <tr>\n      <th>125</th>\n      <td>5.20</td>\n    </tr>\n    <tr>\n      <th>126</th>\n      <td>8.08</td>\n    </tr>\n    <tr>\n      <th>127</th>\n      <td>6.05</td>\n    </tr>\n    <tr>\n      <th>128</th>\n      <td>5.05</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>8.25</td>\n    </tr>\n    <tr>\n      <th>130</th>\n      <td>8.30</td>\n    </tr>\n    <tr>\n      <th>131</th>\n      <td>6.14</td>\n    </tr>\n    <tr>\n      <th>132</th>\n      <td>5.01</td>\n    </tr>\n    <tr>\n      <th>133</th>\n      <td>4.77</td>\n    </tr>\n    <tr>\n      <th>134</th>\n      <td>5.74</td>\n    </tr>\n    <tr>\n      <th>135</th>\n      <td>8.93</td>\n    </tr>\n    <tr>\n      <th>136</th>\n      <td>5.94</td>\n    </tr>\n    <tr>\n      <th>137</th>\n      <td>4.68</td>\n    </tr>\n    <tr>\n      <th>138</th>\n      <td>7.90</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>7.97</td>\n    </tr>\n    <tr>\n      <th>140</th>\n      <td>8.21</td>\n    </tr>\n    <tr>\n      <th>141</th>\n      <td>4.81</td>\n    </tr>\n    <tr>\n      <th>142</th>\n      <td>5.86</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>5.03</td>\n    </tr>\n    <tr>\n      <th>144</th>\n      <td>4.98</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>8.58</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>5.32</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>8.94</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>6.38</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>4.86</td>\n    </tr>\n    <tr>\n      <th>150</th>\n      <td>8.60</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>4.89</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>8.77</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>8.81</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>4.88</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>8.23</td>\n    </tr>\n    <tr>\n      <th>156</th>\n      <td>6.61</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>8.54</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>6.04</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>8.35</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>5.01</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>8.97</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>6.24</td>\n    </tr>\n    <tr>\n      <th>163</th>\n      <td>8.33</td>\n    </tr>\n    <tr>\n      <th>164</th>\n      <td>8.91</td>\n    </tr>\n    <tr>\n      <th>165</th>\n      <td>4.67</td>\n    </tr>\n    <tr>\n      <th>166</th>\n      <td>6.10</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>5.15</td>\n    </tr>\n    <tr>\n      <th>168</th>\n      <td>4.97</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>8.68</td>\n    </tr>\n    <tr>\n      <th>170</th>\n      <td>9.06</td>\n    </tr>\n    <tr>\n      <th>171</th>\n      <td>5.80</td>\n    </tr>\n    <tr>\n      <th>172</th>\n      <td>8.90</td>\n    </tr>\n    <tr>\n      <th>173</th>\n      <td>4.87</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>5.20</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>8.46</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>8.94</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>5.87</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>4.99</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>8.91</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>8.91</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>5.97</td>\n    </tr>\n    <tr>\n      <th>182</th>\n      <td>6.17</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>6.01</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>7.89</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>4.79</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>7.91</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>8.23</td>\n    </tr>\n    <tr>\n      <th>188</th>\n      <td>8.95</td>\n    </tr>\n    <tr>\n      <th>189</th>\n      <td>6.33</td>\n    </tr>\n    <tr>\n      <th>190</th>\n      <td>8.40</td>\n    </tr>\n    <tr>\n      <th>191</th>\n      <td>8.44</td>\n    </tr>\n    <tr>\n      <th>192</th>\n      <td>4.76</td>\n    </tr>\n    <tr>\n      <th>193</th>\n      <td>4.78</td>\n    </tr>\n    <tr>\n      <th>194</th>\n      <td>8.79</td>\n    </tr>\n    <tr>\n      <th>195</th>\n      <td>4.68</td>\n    </tr>\n    <tr>\n      <th>196</th>\n      <td>8.57</td>\n    </tr>\n    <tr>\n      <th>197</th>\n      <td>5.85</td>\n    </tr>\n    <tr>\n      <th>198</th>\n      <td>6.23</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>8.82</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:42:10.782795Z","iopub.execute_input":"2023-02-09T06:42:10.783673Z","iopub.status.idle":"2023-02-09T06:42:10.794441Z","shell.execute_reply.started":"2023-02-09T06:42:10.783633Z","shell.execute_reply":"2023-02-09T06:42:10.793292Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"0       88\n1      113\n2       93\n3       97\n4      110\n5      109\n6       98\n7      115\n8      110\n9       94\n10      86\n11     110\n12      97\n13      88\n14     108\n15      95\n16     111\n17      91\n18     111\n19     113\n20      98\n21      86\n22      92\n23      87\n24      88\n25      98\n26      87\n27     119\n28      94\n29     106\n30     117\n31     112\n32     118\n33     106\n34      96\n35      96\n36     118\n37     108\n38      84\n39     113\n40      85\n41      96\n42      93\n43      86\n44     116\n45     116\n46      94\n47     108\n48     119\n49     109\n50      83\n51      86\n52     116\n53      96\n54     115\n55     108\n56     111\n57     115\n58     109\n59     117\n60     104\n61      96\n62      95\n63     118\n64      87\n65     113\n66      93\n67      85\n68     111\n69      95\n70     109\n71     116\n72      94\n73      83\n74     109\n75     118\n76     112\n77     117\n78      88\n79      92\n80      91\n81     121\n82     111\n83      85\n84     116\n85      88\n86     117\n87     109\n88     117\n89     108\n90     117\n91     114\n92      92\n93      86\n94      95\n95      94\n96     118\n97      95\n98      91\n99     118\n100    110\n101     86\n102     88\n103    119\n104     89\n105     86\n106     92\n107     90\n108    118\n109    118\n110     94\n111    117\n112    109\n113    111\n114     91\n115    118\n116     95\n117    108\n118    117\n119     87\n120     87\n121    109\n122     93\n123    119\n124     97\n125     85\n126     98\n127    109\n128     87\n129     96\n130     93\n131    111\n132     83\n133     86\n134    112\n135    118\n136    109\n137     87\n138    100\n139     96\n140     94\n141     85\n142    111\n143     87\n144     87\n145    118\n146     88\n147    117\n148    107\n149     88\n150    117\n151     85\n152    117\n153    116\n154     86\n155     95\n156    111\n157    118\n158    110\n159     93\n160     86\n161    119\n162    108\n163     92\n164    117\n165     86\n166    109\n167     85\n168     88\n169    119\n170    120\n171    110\n172    117\n173     88\n174     89\n175     98\n176    115\n177    108\n178     88\n179    115\n180    117\n181    108\n182    110\n183    107\n184     96\n185     88\n186     93\n187     91\n188    116\n189    111\n190     93\n191     94\n192     89\n193     85\n194     96\n195     89\n196    118\n197    112\n198    108\n199    117\nName: iq, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"#train test split","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\ntrain_test_split(x,y,test_size=0.1)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:46:27.802602Z","iopub.execute_input":"2023-02-09T06:46:27.803150Z","iopub.status.idle":"2023-02-09T06:46:28.191139Z","shell.execute_reply.started":"2023-02-09T06:46:27.803074Z","shell.execute_reply":"2023-02-09T06:46:28.189928Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"[     cgpa\n 68   5.77\n 43   5.31\n 52   8.79\n 18   6.05\n 66   8.53\n 88   8.76\n 36   8.56\n 60   6.02\n 182  6.17\n 24   4.96\n 170  9.06\n 35   8.00\n 162  6.24\n 119  4.98\n 160  5.01\n 104  4.96\n 5    5.88\n 31   6.01\n 73   5.28\n 62   8.65\n 136  5.94\n 149  4.86\n 103  8.91\n 123  8.72\n 180  8.91\n 83   4.90\n 143  5.03\n 157  8.54\n 56   5.85\n 3    8.27\n 41   8.43\n 165  4.67\n 120  4.78\n 21   4.86\n 126  8.08\n 38   5.44\n 95   8.18\n 122  8.40\n 145  8.58\n 14   5.71\n 34   7.77\n 111  8.86\n 44   8.96\n 194  8.79\n 32   8.83\n 188  8.95\n 197  5.85\n 158  6.04\n 97   8.61\n 64   5.21\n 101  5.01\n 46   8.14\n 193  4.78\n 98   4.98\n 176  8.94\n 51   4.95\n 4    5.45\n 89   5.80\n 9    8.09\n 13   5.00\n 198  6.23\n 151  4.89\n 127  6.05\n 37   5.91\n 0    5.13\n 132  5.01\n 190  8.40\n 91   9.23\n 28   8.04\n 22   7.78\n 172  8.90\n 87   5.74\n 150  8.60\n 148  6.38\n 171  5.80\n 7    8.80\n 29   5.43\n 63   8.92\n 110  8.08\n 139  7.97\n 26   4.86\n 96   9.03\n 6    8.41\n 173  4.87\n 147  8.94\n 85   4.89\n 146  5.32\n 117  5.74\n 45   8.78\n 107  4.76\n 116  8.25\n 164  8.91\n 100  5.88\n 8    5.79\n 90   8.78\n 78   5.15\n 112  5.91\n 161  8.97\n 168  4.97\n 108  8.98\n 80   8.14\n 130  8.30\n 167  5.15\n 186  7.91\n 55   6.05\n 174  5.20\n 72   7.93\n 131  6.14\n 191  8.44\n 141  4.81\n 69   8.29\n 177  5.87\n 93   5.05\n 77   9.30\n 181  5.97\n 30   8.86\n 99   9.13\n 27   9.18\n 152  8.77\n 129  8.25\n 92   8.20\n 50   5.14\n 2    8.36\n 15   8.31\n 199  8.82\n 134  5.74\n 140  8.21\n 16   5.50\n 121  5.69\n 59   9.07\n 10   4.60\n 106  7.99\n 142  5.86\n 169  8.68\n 12   8.16\n 53   8.12\n 54   8.81\n 183  6.01\n 74   5.55\n 192  4.76\n 19   5.84\n 49   5.67\n 118  8.97\n 67   4.91\n 155  8.23\n 125  5.20\n 48   8.45\n 137  4.68\n 144  4.98\n 81   9.01\n 70   6.06\n 105  4.85\n 25   7.93\n 39   5.57\n 65   8.75\n 109  9.03\n 179  8.91\n 133  4.77\n 178  4.99\n 189  6.33\n 113  5.67\n 166  6.10\n 94   8.67\n 154  4.88\n 114  8.26\n 163  8.33\n 17   7.87\n 71   8.71\n 187  8.23\n 185  4.79\n 42   8.02\n 23   4.78\n 128  5.05\n 159  8.35\n 47   6.40\n 115  8.89\n 124  7.84\n 196  8.57\n 86   9.00\n 82   5.47,\n      cgpa\n 61   8.34\n 195  4.68\n 1    5.90\n 11   6.10\n 76   5.81\n 175  8.46\n 75   8.86\n 58   5.87\n 184  7.89\n 84   8.97\n 102  4.95\n 135  8.93\n 153  8.81\n 138  7.90\n 156  6.61\n 79   8.72\n 40   5.34\n 20   7.47\n 57   8.88\n 33   5.32,\n 68     111\n 43      86\n 52     116\n 18     111\n 66      93\n 88     117\n 36     118\n 60     104\n 182    110\n 24      88\n 170    120\n 35      96\n 162    108\n 119     87\n 160     86\n 104     89\n 5      109\n 31     112\n 73      83\n 62      95\n 136    109\n 149     88\n 103    119\n 123    119\n 180    117\n 83      85\n 143     87\n 157    118\n 56     111\n 3       97\n 41      96\n 165     86\n 120     87\n 21      86\n 126     98\n 38      84\n 95      94\n 122     93\n 145    118\n 14     108\n 34      96\n 111    117\n 44     116\n 194     96\n 32     118\n 188    116\n 197    112\n 158    110\n 97      95\n 64      87\n 101     86\n 46      94\n 193     85\n 98      91\n 176    115\n 51      86\n 4      110\n 89     108\n 9       94\n 13      88\n 198    108\n 151     85\n 127    109\n 37     108\n 0       88\n 132     83\n 190     93\n 91     114\n 28      94\n 22      92\n 172    117\n 87     109\n 150    117\n 148    107\n 171    110\n 7      115\n 29     106\n 63     118\n 110     94\n 139     96\n 26      87\n 96     118\n 6       98\n 173     88\n 147    117\n 85      88\n 146     88\n 117    108\n 45     116\n 107     90\n 116     95\n 164    117\n 100    110\n 8      110\n 90     117\n 78      88\n 112    109\n 161    119\n 168     88\n 108    118\n 80      91\n 130     93\n 167     85\n 186     93\n 55     108\n 174     89\n 72      94\n 131    111\n 191     94\n 141     85\n 69      95\n 177    108\n 93      86\n 77     117\n 181    108\n 30     117\n 99     118\n 27     119\n 152    117\n 129     96\n 92      92\n 50      83\n 2       93\n 15      95\n 199    117\n 134    112\n 140     94\n 16     111\n 121    109\n 59     117\n 10      86\n 106     92\n 142    111\n 169    119\n 12      97\n 53      96\n 54     115\n 183    107\n 74     109\n 192     89\n 19     113\n 49     109\n 118    117\n 67      85\n 155     95\n 125     85\n 48     119\n 137     87\n 144     87\n 81     121\n 70     109\n 105     86\n 25      98\n 39     113\n 65     113\n 109    118\n 179    115\n 133     86\n 178     88\n 189    111\n 113    111\n 166    109\n 94      95\n 154     86\n 114     91\n 163     92\n 17      91\n 71     116\n 187     91\n 185     88\n 42      93\n 23      87\n 128     87\n 159     93\n 47     108\n 115    118\n 124     97\n 196    118\n 86     117\n 82     111\n Name: iq, dtype: int64,\n 61      96\n 195     89\n 1      113\n 11     110\n 76     112\n 175     98\n 75     118\n 58     109\n 184     96\n 84     116\n 102     88\n 135    118\n 153    116\n 138    100\n 156    111\n 79      92\n 40      85\n 20      98\n 57     115\n 33     106\n Name: iq, dtype: int64]"},"metadata":{}}]},{"cell_type":"code","source":"#store in variable ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:49:59.019703Z","iopub.execute_input":"2023-02-09T06:49:59.020117Z","iopub.status.idle":"2023-02-09T06:49:59.030143Z","shell.execute_reply.started":"2023-02-09T06:49:59.020063Z","shell.execute_reply":"2023-02-09T06:49:59.027603Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"#randomly ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:50:45.966959Z","iopub.execute_input":"2023-02-09T06:50:45.967477Z","iopub.status.idle":"2023-02-09T06:50:45.994112Z","shell.execute_reply.started":"2023-02-09T06:50:45.967441Z","shell.execute_reply":"2023-02-09T06:50:45.992768Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"     cgpa\n89   5.80\n127  6.05\n60   6.02\n136  5.94\n144  4.98\n71   8.71\n30   8.86\n103  8.91\n183  6.01\n149  4.86\n27   9.18\n138  7.90\n73   5.28\n3    8.27\n88   8.76\n45   8.78\n172  8.90\n29   5.43\n167  5.15\n188  8.95\n110  8.08\n112  5.91\n157  8.54\n145  8.58\n100  5.88\n171  5.80\n6    8.41\n165  4.67\n58   5.87\n92   8.20\n40   5.34\n63   8.92\n153  8.81\n177  5.87\n161  8.97\n168  4.97\n108  8.98\n26   4.86\n5    5.88\n19   5.84\n148  6.38\n25   7.93\n37   5.91\n13   5.00\n33   5.32\n21   4.86\n42   8.02\n91   9.23\n50   5.14\n78   5.15\n47   6.40\n176  8.94\n142  5.86\n70   6.06\n147  8.94\n178  4.99\n102  4.95\n85   4.89\n48   8.45\n14   5.71\n140  8.21\n125  5.20\n105  4.85\n94   8.67\n16   5.50\n9    8.09\n182  6.17\n197  5.85\n41   8.43\n113  5.67\n76   5.81\n23   4.78\n155  8.23\n128  5.05\n114  8.26\n162  6.24\n195  4.68\n129  8.25\n123  8.72\n175  8.46\n67   4.91\n132  5.01\n65   8.75\n193  4.78\n68   5.77\n97   8.61\n173  4.87\n1    5.90\n95   8.18\n116  8.25\n190  8.40\n141  4.81\n0    5.13\n59   9.07\n49   5.67\n4    5.45\n36   8.56\n104  4.96\n166  6.10\n69   8.29\n151  4.89\n96   9.03\n72   7.93\n18   6.05\n17   7.87\n192  4.76\n137  4.68\n174  5.20\n164  8.91\n107  4.76\n106  7.99\n163  8.33\n124  7.84\n150  8.60\n101  5.01\n115  8.89\n180  8.91\n169  8.68\n56   5.85\n11   6.10\n146  5.32\n83   4.90\n10   4.60\n81   9.01\n28   8.04\n117  5.74\n46   8.14\n109  9.03\n82   5.47\n66   8.53\n44   8.96\n119  4.98\n198  6.23\n111  8.86\n126  8.08\n179  8.91\n54   8.81\n55   6.05\n159  8.35\n15   8.31\n64   5.21\n186  7.91\n191  8.44\n79   8.72\n2    8.36\n170  9.06\n154  4.88\n87   5.74\n57   8.88\n75   8.86\n120  4.78\n90   8.78\n130  8.30\n185  4.79\n62   8.65\n133  4.77\n194  8.79\n80   8.14\n12   8.16\n118  8.97\n84   8.97\n139  7.97\n7    8.80\n181  5.97\n189  6.33\n22   7.78\n38   5.44\n98   4.98\n131  6.14\n134  5.74\n53   8.12\n99   9.13\n52   8.79\n199  8.82\n39   5.57\n34   7.77\n135  8.93\n51   4.95\n160  5.01\n93   5.05","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cgpa</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>89</th>\n      <td>5.80</td>\n    </tr>\n    <tr>\n      <th>127</th>\n      <td>6.05</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>6.02</td>\n    </tr>\n    <tr>\n      <th>136</th>\n      <td>5.94</td>\n    </tr>\n    <tr>\n      <th>144</th>\n      <td>4.98</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>8.71</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>8.86</td>\n    </tr>\n    <tr>\n      <th>103</th>\n      <td>8.91</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>6.01</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>4.86</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>9.18</td>\n    </tr>\n    <tr>\n      <th>138</th>\n      <td>7.90</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>5.28</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.27</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>8.76</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>8.78</td>\n    </tr>\n    <tr>\n      <th>172</th>\n      <td>8.90</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>5.43</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>5.15</td>\n    </tr>\n    <tr>\n      <th>188</th>\n      <td>8.95</td>\n    </tr>\n    <tr>\n      <th>110</th>\n      <td>8.08</td>\n    </tr>\n    <tr>\n      <th>112</th>\n      <td>5.91</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>8.54</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>8.58</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>5.88</td>\n    </tr>\n    <tr>\n      <th>171</th>\n      <td>5.80</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8.41</td>\n    </tr>\n    <tr>\n      <th>165</th>\n      <td>4.67</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>5.87</td>\n    </tr>\n    <tr>\n      <th>92</th>\n      <td>8.20</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>5.34</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>8.92</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>8.81</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>5.87</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>8.97</td>\n    </tr>\n    <tr>\n      <th>168</th>\n      <td>4.97</td>\n    </tr>\n    <tr>\n      <th>108</th>\n      <td>8.98</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>4.86</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5.88</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>5.84</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>6.38</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>7.93</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>5.91</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>5.00</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>5.32</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>4.86</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>8.02</td>\n    </tr>\n    <tr>\n      <th>91</th>\n      <td>9.23</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>5.14</td>\n    </tr>\n    <tr>\n      <th>78</th>\n      <td>5.15</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>6.40</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>8.94</td>\n    </tr>\n    <tr>\n      <th>142</th>\n      <td>5.86</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>6.06</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>8.94</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>4.99</td>\n    </tr>\n    <tr>\n      <th>102</th>\n      <td>4.95</td>\n    </tr>\n    <tr>\n      <th>85</th>\n      <td>4.89</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>8.45</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>5.71</td>\n    </tr>\n    <tr>\n      <th>140</th>\n      <td>8.21</td>\n    </tr>\n    <tr>\n      <th>125</th>\n      <td>5.20</td>\n    </tr>\n    <tr>\n      <th>105</th>\n      <td>4.85</td>\n    </tr>\n    <tr>\n      <th>94</th>\n      <td>8.67</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>5.50</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>8.09</td>\n    </tr>\n    <tr>\n      <th>182</th>\n      <td>6.17</td>\n    </tr>\n    <tr>\n      <th>197</th>\n      <td>5.85</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>8.43</td>\n    </tr>\n    <tr>\n      <th>113</th>\n      <td>5.67</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>5.81</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>4.78</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>8.23</td>\n    </tr>\n    <tr>\n      <th>128</th>\n      <td>5.05</td>\n    </tr>\n    <tr>\n      <th>114</th>\n      <td>8.26</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>6.24</td>\n    </tr>\n    <tr>\n      <th>195</th>\n      <td>4.68</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>8.25</td>\n    </tr>\n    <tr>\n      <th>123</th>\n      <td>8.72</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>8.46</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>4.91</td>\n    </tr>\n    <tr>\n      <th>132</th>\n      <td>5.01</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>8.75</td>\n    </tr>\n    <tr>\n      <th>193</th>\n      <td>4.78</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>5.77</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>8.61</td>\n    </tr>\n    <tr>\n      <th>173</th>\n      <td>4.87</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.90</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>8.18</td>\n    </tr>\n    <tr>\n      <th>116</th>\n      <td>8.25</td>\n    </tr>\n    <tr>\n      <th>190</th>\n      <td>8.40</td>\n    </tr>\n    <tr>\n      <th>141</th>\n      <td>4.81</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>5.13</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>9.07</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>5.67</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.45</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>8.56</td>\n    </tr>\n    <tr>\n      <th>104</th>\n      <td>4.96</td>\n    </tr>\n    <tr>\n      <th>166</th>\n      <td>6.10</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>8.29</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>4.89</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>9.03</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>7.93</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>6.05</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>7.87</td>\n    </tr>\n    <tr>\n      <th>192</th>\n      <td>4.76</td>\n    </tr>\n    <tr>\n      <th>137</th>\n      <td>4.68</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>5.20</td>\n    </tr>\n    <tr>\n      <th>164</th>\n      <td>8.91</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>4.76</td>\n    </tr>\n    <tr>\n      <th>106</th>\n      <td>7.99</td>\n    </tr>\n    <tr>\n      <th>163</th>\n      <td>8.33</td>\n    </tr>\n    <tr>\n      <th>124</th>\n      <td>7.84</td>\n    </tr>\n    <tr>\n      <th>150</th>\n      <td>8.60</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>5.01</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>8.89</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>8.91</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>8.68</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>5.85</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>6.10</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>5.32</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>4.90</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>4.60</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>9.01</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>8.04</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>5.74</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>8.14</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>9.03</td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>5.47</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>8.53</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>8.96</td>\n    </tr>\n    <tr>\n      <th>119</th>\n      <td>4.98</td>\n    </tr>\n    <tr>\n      <th>198</th>\n      <td>6.23</td>\n    </tr>\n    <tr>\n      <th>111</th>\n      <td>8.86</td>\n    </tr>\n    <tr>\n      <th>126</th>\n      <td>8.08</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>8.91</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>8.81</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>6.05</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>8.35</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>8.31</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>5.21</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>7.91</td>\n    </tr>\n    <tr>\n      <th>191</th>\n      <td>8.44</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>8.72</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.36</td>\n    </tr>\n    <tr>\n      <th>170</th>\n      <td>9.06</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>4.88</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>5.74</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>8.88</td>\n    </tr>\n    <tr>\n      <th>75</th>\n      <td>8.86</td>\n    </tr>\n    <tr>\n      <th>120</th>\n      <td>4.78</td>\n    </tr>\n    <tr>\n      <th>90</th>\n      <td>8.78</td>\n    </tr>\n    <tr>\n      <th>130</th>\n      <td>8.30</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>4.79</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>8.65</td>\n    </tr>\n    <tr>\n      <th>133</th>\n      <td>4.77</td>\n    </tr>\n    <tr>\n      <th>194</th>\n      <td>8.79</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>8.14</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>8.16</td>\n    </tr>\n    <tr>\n      <th>118</th>\n      <td>8.97</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>8.97</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>7.97</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8.80</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>5.97</td>\n    </tr>\n    <tr>\n      <th>189</th>\n      <td>6.33</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>7.78</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>5.44</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>4.98</td>\n    </tr>\n    <tr>\n      <th>131</th>\n      <td>6.14</td>\n    </tr>\n    <tr>\n      <th>134</th>\n      <td>5.74</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>8.12</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>9.13</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>8.79</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>8.82</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>5.57</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>7.77</td>\n    </tr>\n    <tr>\n      <th>135</th>\n      <td>8.93</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>4.95</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>5.01</td>\n    </tr>\n    <tr>\n      <th>93</th>\n      <td>5.05</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y_train","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:51:08.640694Z","iopub.execute_input":"2023-02-09T06:51:08.641084Z","iopub.status.idle":"2023-02-09T06:51:08.650563Z","shell.execute_reply.started":"2023-02-09T06:51:08.641053Z","shell.execute_reply":"2023-02-09T06:51:08.649368Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"89     108\n127    109\n60     104\n136    109\n144     87\n71     116\n30     117\n103    119\n183    107\n149     88\n27     119\n138    100\n73      83\n3       97\n88     117\n45     116\n172    117\n29     106\n167     85\n188    116\n110     94\n112    109\n157    118\n145    118\n100    110\n171    110\n6       98\n165     86\n58     109\n92      92\n40      85\n63     118\n153    116\n177    108\n161    119\n168     88\n108    118\n26      87\n5      109\n19     113\n148    107\n25      98\n37     108\n13      88\n33     106\n21      86\n42      93\n91     114\n50      83\n78      88\n47     108\n176    115\n142    111\n70     109\n147    117\n178     88\n102     88\n85      88\n48     119\n14     108\n140     94\n125     85\n105     86\n94      95\n16     111\n9       94\n182    110\n197    112\n41      96\n113    111\n76     112\n23      87\n155     95\n128     87\n114     91\n162    108\n195     89\n129     96\n123    119\n175     98\n67      85\n132     83\n65     113\n193     85\n68     111\n97      95\n173     88\n1      113\n95      94\n116     95\n190     93\n141     85\n0       88\n59     117\n49     109\n4      110\n36     118\n104     89\n166    109\n69      95\n151     85\n96     118\n72      94\n18     111\n17      91\n192     89\n137     87\n174     89\n164    117\n107     90\n106     92\n163     92\n124     97\n150    117\n101     86\n115    118\n180    117\n169    119\n56     111\n11     110\n146     88\n83      85\n10      86\n81     121\n28      94\n117    108\n46      94\n109    118\n82     111\n66      93\n44     116\n119     87\n198    108\n111    117\n126     98\n179    115\n54     115\n55     108\n159     93\n15      95\n64      87\n186     93\n191     94\n79      92\n2       93\n170    120\n154     86\n87     109\n57     115\n75     118\n120     87\n90     117\n130     93\n185     88\n62      95\n133     86\n194     96\n80      91\n12      97\n118    117\n84     116\n139     96\n7      115\n181    108\n189    111\n22      92\n38      84\n98      91\n131    111\n134    112\n53      96\n99     118\n52     116\n199    117\n39     113\n34      96\n135    118\n51      86\n160     86\n93      86\nName: iq, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"x_test","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_test","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#scaling","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:58:22.540546Z","iopub.execute_input":"2023-02-09T06:58:22.541300Z","iopub.status.idle":"2023-02-09T06:58:22.545464Z","shell.execute_reply.started":"2023-02-09T06:58:22.541257Z","shell.execute_reply":"2023-02-09T06:58:22.544667Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"scaler = StandardScaler()","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:58:32.320553Z","iopub.execute_input":"2023-02-09T06:58:32.321207Z","iopub.status.idle":"2023-02-09T06:58:32.325823Z","shell.execute_reply.started":"2023-02-09T06:58:32.321172Z","shell.execute_reply":"2023-02-09T06:58:32.324151Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"x_train = scaler.fit_transform(x_train)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:59:41.095571Z","iopub.execute_input":"2023-02-09T06:59:41.096106Z","iopub.status.idle":"2023-02-09T06:59:41.107002Z","shell.execute_reply.started":"2023-02-09T06:59:41.096046Z","shell.execute_reply":"2023-02-09T06:59:41.105294Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"x_train","metadata":{"execution":{"iopub.status.busy":"2023-02-09T06:59:56.500970Z","iopub.execute_input":"2023-02-09T06:59:56.501356Z","iopub.status.idle":"2023-02-09T06:59:56.509702Z","shell.execute_reply.started":"2023-02-09T06:59:56.501319Z","shell.execute_reply":"2023-02-09T06:59:56.509107Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"array([[-0.709975  ],\n       [-0.55702907],\n       [-0.57538258],\n       [-0.62432528],\n       [-1.21163765],\n       [ 1.07031561],\n       [ 1.16208317],\n       [ 1.19267235],\n       [-0.58150042],\n       [-1.28505169],\n       [ 1.35785395],\n       [ 0.5747708 ],\n       [-1.02810253],\n       [ 0.80113077],\n       [ 1.10090479],\n       [ 1.11314047],\n       [ 1.18655451],\n       [-0.93633498],\n       [-1.10763442],\n       [ 1.2171437 ],\n       [ 0.68489187],\n       [-0.64267879],\n       [ 0.96631238],\n       [ 0.99078373],\n       [-0.6610323 ],\n       [-0.709975  ],\n       [ 0.88678049],\n       [-1.4012906 ],\n       [-0.66715014],\n       [ 0.75830591],\n       [-0.99139551],\n       [ 1.19879019],\n       [ 1.13149398],\n       [-0.66715014],\n       [ 1.22937937],\n       [-1.21775548],\n       [ 1.23549721],\n       [-1.28505169],\n       [-0.6610323 ],\n       [-0.68550365],\n       [-0.35514045],\n       [ 0.59312431],\n       [-0.64267879],\n       [-1.19940197],\n       [-1.00363118],\n       [-1.28505169],\n       [ 0.64818485],\n       [ 1.38844314],\n       [-1.11375225],\n       [-1.10763442],\n       [-0.34290477],\n       [ 1.21102586],\n       [-0.67326798],\n       [-0.55091124],\n       [ 1.21102586],\n       [-1.20551981],\n       [-1.22999116],\n       [-1.26669818],\n       [ 0.91125184],\n       [-0.76503554],\n       [ 0.76442375],\n       [-1.07704523],\n       [-1.29116953],\n       [ 1.04584426],\n       [-0.89351012],\n       [ 0.69100971],\n       [-0.48361503],\n       [-0.67938582],\n       [ 0.89901617],\n       [-0.78950688],\n       [-0.70385716],\n       [-1.33399439],\n       [ 0.77665943],\n       [-1.16881279],\n       [ 0.79501294],\n       [-0.44079017],\n       [-1.39517276],\n       [ 0.7888951 ],\n       [ 1.07643345],\n       [ 0.91736968],\n       [-1.25446251],\n       [-1.19328414],\n       [ 1.09478696],\n       [-1.33399439],\n       [-0.72832851],\n       [ 1.00913724],\n       [-1.27893386],\n       [-0.64879663],\n       [ 0.74607024],\n       [ 0.7888951 ],\n       [ 0.88066266],\n       [-1.31564088],\n       [-1.11987009],\n       [ 1.29055775],\n       [-0.78950688],\n       [-0.9240993 ],\n       [ 0.97854805],\n       [-1.22387332],\n       [-0.52643989],\n       [ 0.81336645],\n       [-1.26669818],\n       [ 1.2660864 ],\n       [ 0.59312431],\n       [-0.55702907],\n       [ 0.55641729],\n       [-1.34623006],\n       [-1.39517276],\n       [-1.07704523],\n       [ 1.19267235],\n       [-1.34623006],\n       [ 0.62983133],\n       [ 0.8378378 ],\n       [ 0.53806378],\n       [ 1.0030194 ],\n       [-1.19328414],\n       [ 1.18043668],\n       [ 1.19267235],\n       [ 1.0519621 ],\n       [-0.67938582],\n       [-0.52643989],\n       [-1.00363118],\n       [-1.26058034],\n       [-1.44411546],\n       [ 1.25385072],\n       [ 0.66042052],\n       [-0.74668202],\n       [ 0.72159889],\n       [ 1.2660864 ],\n       [-0.91186363],\n       [ 0.96019454],\n       [ 1.22326154],\n       [-1.21163765],\n       [-0.446908  ],\n       [ 1.16208317],\n       [ 0.68489187],\n       [ 1.19267235],\n       [ 1.13149398],\n       [-0.55702907],\n       [ 0.85007347],\n       [ 0.82560212],\n       [-1.07092739],\n       [ 0.58088864],\n       [ 0.90513401],\n       [ 1.07643345],\n       [ 0.85619131],\n       [ 1.28443991],\n       [-1.27281602],\n       [-0.74668202],\n       [ 1.17431884],\n       [ 1.16208317],\n       [-1.33399439],\n       [ 1.11314047],\n       [ 0.81948429],\n       [-1.32787655],\n       [ 1.03360859],\n       [-1.34011223],\n       [ 1.11925831],\n       [ 0.72159889],\n       [ 0.73383457],\n       [ 1.22937937],\n       [ 1.22937937],\n       [ 0.61759566],\n       [ 1.12537614],\n       [-0.60597177],\n       [-0.38572963],\n       [ 0.50135675],\n       [-0.93021714],\n       [-1.21163765],\n       [-0.50196854],\n       [-0.74668202],\n       [ 0.70936322],\n       [ 1.32726477],\n       [ 1.11925831],\n       [ 1.13761182],\n       [-0.85068526],\n       [ 0.49523892],\n       [ 1.20490803],\n       [-1.22999116],\n       [-1.19328414],\n       [-1.16881279]])"},"metadata":{}}]},{"cell_type":"code","source":"x_test = scaler.fit_transform(x_test)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:11:34.274882Z","iopub.execute_input":"2023-02-09T07:11:34.275273Z","iopub.status.idle":"2023-02-09T07:11:34.283059Z","shell.execute_reply.started":"2023-02-09T07:11:34.275248Z","shell.execute_reply":"2023-02-09T07:11:34.281826Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"x_test","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:12:13.966305Z","iopub.execute_input":"2023-02-09T07:12:13.966711Z","iopub.status.idle":"2023-02-09T07:12:13.976047Z","shell.execute_reply.started":"2023-02-09T07:12:13.966683Z","shell.execute_reply":"2023-02-09T07:12:13.974797Z"},"trusted":true},"execution_count":50,"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"array([[ 0.82521746],\n       [-0.95406182],\n       [ 1.07745245],\n       [ 0.78431449],\n       [ 0.70932571],\n       [ 0.4775422 ],\n       [-1.51988627],\n       [-1.11767371],\n       [ 1.43876204],\n       [ 1.11835543],\n       [ 0.19122139],\n       [-1.47216614],\n       [-1.02223344],\n       [ 0.55253098],\n       [ 0.94110921],\n       [-0.39505454],\n       [-0.78363277],\n       [-0.80408426],\n       [-1.2812856 ],\n       [ 1.23424718]])"},"metadata":{}}]},{"cell_type":"code","source":"y_train = scaler.fit_transform(y_train)","metadata":{"trusted":true},"execution_count":51,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_28/3979520130.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    850\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    851\u001b[0m             \u001b[0;31m# fit method of arity 1 (unsupervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 852\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    853\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m             \u001b[0;31m# fit method of arity 2 (supervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    804\u001b[0m         \u001b[0;31m# Reset internal state before fitting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 806\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    807\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mpartial_fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    845\u001b[0m             \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFLOAT_DTYPES\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    846\u001b[0m             \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"allow-nan\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 847\u001b[0;31m             \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfirst_call\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    848\u001b[0m         )\n\u001b[1;32m    849\u001b[0m         \u001b[0mn_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    564\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Validation should be done on X, y or both.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    565\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 566\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    567\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    771\u001b[0m                     \u001b[0;34m\"Reshape your data either using array.reshape(-1, 1) if \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    772\u001b[0m                     \u001b[0;34m\"your data has a single feature or array.reshape(1, -1) \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 773\u001b[0;31m                     \u001b[0;34m\"if it contains a single sample.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    774\u001b[0m                 )\n\u001b[1;32m    775\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Expected 2D array, got 1D array instead:\narray=[108. 109. 104. 109.  87. 116. 117. 119. 107.  88. 119. 100.  83.  97.\n 117. 116. 117. 106.  85. 116.  94. 109. 118. 118. 110. 110.  98.  86.\n 109.  92.  85. 118. 116. 108. 119.  88. 118.  87. 109. 113. 107.  98.\n 108.  88. 106.  86.  93. 114.  83.  88. 108. 115. 111. 109. 117.  88.\n  88.  88. 119. 108.  94.  85.  86.  95. 111.  94. 110. 112.  96. 111.\n 112.  87.  95.  87.  91. 108.  89.  96. 119.  98.  85.  83. 113.  85.\n 111.  95.  88. 113.  94.  95.  93.  85.  88. 117. 109. 110. 118.  89.\n 109.  95.  85. 118.  94. 111.  91.  89.  87.  89. 117.  90.  92.  92.\n  97. 117.  86. 118. 117. 119. 111. 110.  88.  85.  86. 121.  94. 108.\n  94. 118. 111.  93. 116.  87. 108. 117.  98. 115. 115. 108.  93.  95.\n  87.  93.  94.  92.  93. 120.  86. 109. 115. 118.  87. 117.  93.  88.\n  95.  86.  96.  91.  97. 117. 116.  96. 115. 108. 111.  92.  84.  91.\n 111. 112.  96. 118. 116. 117. 113.  96. 118.  86.  86.  86.].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."],"ename":"ValueError","evalue":"Expected 2D array, got 1D array instead:\narray=[108. 109. 104. 109.  87. 116. 117. 119. 107.  88. 119. 100.  83.  97.\n 117. 116. 117. 106.  85. 116.  94. 109. 118. 118. 110. 110.  98.  86.\n 109.  92.  85. 118. 116. 108. 119.  88. 118.  87. 109. 113. 107.  98.\n 108.  88. 106.  86.  93. 114.  83.  88. 108. 115. 111. 109. 117.  88.\n  88.  88. 119. 108.  94.  85.  86.  95. 111.  94. 110. 112.  96. 111.\n 112.  87.  95.  87.  91. 108.  89.  96. 119.  98.  85.  83. 113.  85.\n 111.  95.  88. 113.  94.  95.  93.  85.  88. 117. 109. 110. 118.  89.\n 109.  95.  85. 118.  94. 111.  91.  89.  87.  89. 117.  90.  92.  92.\n  97. 117.  86. 118. 117. 119. 111. 110.  88.  85.  86. 121.  94. 108.\n  94. 118. 111.  93. 116.  87. 108. 117.  98. 115. 115. 108.  93.  95.\n  87.  93.  94.  92.  93. 120.  86. 109. 115. 118.  87. 117.  93.  88.\n  95.  86.  96.  91.  97. 117. 116.  96. 115. 108. 111.  92.  84.  91.\n 111. 112.  96. 118. 116. 117. 113.  96. 118.  86.  86.  86.].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.","output_type":"error"}]},{"cell_type":"code","source":"y_train","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:14:45.930325Z","iopub.execute_input":"2023-02-09T07:14:45.931007Z","iopub.status.idle":"2023-02-09T07:14:45.941850Z","shell.execute_reply.started":"2023-02-09T07:14:45.930970Z","shell.execute_reply":"2023-02-09T07:14:45.940123Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"89     108\n127    109\n60     104\n136    109\n144     87\n71     116\n30     117\n103    119\n183    107\n149     88\n27     119\n138    100\n73      83\n3       97\n88     117\n45     116\n172    117\n29     106\n167     85\n188    116\n110     94\n112    109\n157    118\n145    118\n100    110\n171    110\n6       98\n165     86\n58     109\n92      92\n40      85\n63     118\n153    116\n177    108\n161    119\n168     88\n108    118\n26      87\n5      109\n19     113\n148    107\n25      98\n37     108\n13      88\n33     106\n21      86\n42      93\n91     114\n50      83\n78      88\n47     108\n176    115\n142    111\n70     109\n147    117\n178     88\n102     88\n85      88\n48     119\n14     108\n140     94\n125     85\n105     86\n94      95\n16     111\n9       94\n182    110\n197    112\n41      96\n113    111\n76     112\n23      87\n155     95\n128     87\n114     91\n162    108\n195     89\n129     96\n123    119\n175     98\n67      85\n132     83\n65     113\n193     85\n68     111\n97      95\n173     88\n1      113\n95      94\n116     95\n190     93\n141     85\n0       88\n59     117\n49     109\n4      110\n36     118\n104     89\n166    109\n69      95\n151     85\n96     118\n72      94\n18     111\n17      91\n192     89\n137     87\n174     89\n164    117\n107     90\n106     92\n163     92\n124     97\n150    117\n101     86\n115    118\n180    117\n169    119\n56     111\n11     110\n146     88\n83      85\n10      86\n81     121\n28      94\n117    108\n46      94\n109    118\n82     111\n66      93\n44     116\n119     87\n198    108\n111    117\n126     98\n179    115\n54     115\n55     108\n159     93\n15      95\n64      87\n186     93\n191     94\n79      92\n2       93\n170    120\n154     86\n87     109\n57     115\n75     118\n120     87\n90     117\n130     93\n185     88\n62      95\n133     86\n194     96\n80      91\n12      97\n118    117\n84     116\n139     96\n7      115\n181    108\n189    111\n22      92\n38      84\n98      91\n131    111\n134    112\n53      96\n99     118\n52     116\n199    117\n39     113\n34      96\n135    118\n51      86\n160     86\n93      86\nName: iq, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"y_test = scaler.fit_transform(y_test)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:15:01.743249Z","iopub.execute_input":"2023-02-09T07:15:01.743855Z","iopub.status.idle":"2023-02-09T07:15:01.766723Z","shell.execute_reply.started":"2023-02-09T07:15:01.743823Z","shell.execute_reply":"2023-02-09T07:15:01.765220Z"},"trusted":true},"execution_count":53,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_28/3628073155.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    850\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    851\u001b[0m             \u001b[0;31m# fit method of arity 1 (unsupervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 852\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    853\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m             \u001b[0;31m# fit method of arity 2 (supervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    804\u001b[0m         \u001b[0;31m# Reset internal state before fitting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 806\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    807\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mpartial_fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    845\u001b[0m             \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFLOAT_DTYPES\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    846\u001b[0m             \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"allow-nan\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 847\u001b[0;31m             \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfirst_call\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    848\u001b[0m         )\n\u001b[1;32m    849\u001b[0m         \u001b[0mn_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    564\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Validation should be done on X, y or both.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    565\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 566\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    567\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    771\u001b[0m                     \u001b[0;34m\"Reshape your data either using array.reshape(-1, 1) if \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    772\u001b[0m                     \u001b[0;34m\"your data has a single feature or array.reshape(1, -1) \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 773\u001b[0;31m                     \u001b[0;34m\"if it contains a single sample.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    774\u001b[0m                 )\n\u001b[1;32m    775\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Expected 2D array, got 1D array instead:\narray=[ 93. 110. 117.  96.  91.  96.  88. 109. 117. 118.  98.  87. 109.  96.\n 118. 111. 110. 112.  86. 117.].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."],"ename":"ValueError","evalue":"Expected 2D array, got 1D array instead:\narray=[ 93. 110. 117.  96.  91.  96.  88. 109. 117. 118.  98.  87. 109.  96.\n 118. 111. 110. 112.  86. 117.].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.","output_type":"error"}]},{"cell_type":"code","source":"y_test","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:15:08.689429Z","iopub.execute_input":"2023-02-09T07:15:08.690039Z","iopub.status.idle":"2023-02-09T07:15:08.696047Z","shell.execute_reply.started":"2023-02-09T07:15:08.690011Z","shell.execute_reply":"2023-02-09T07:15:08.695082Z"},"trusted":true},"execution_count":54,"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"122     93\n8      110\n152    117\n61      96\n187     91\n184     96\n24      88\n74     109\n77     117\n32     118\n20      98\n143     87\n121    109\n35      96\n196    118\n156    111\n158    110\n31     112\n43      86\n86     117\nName: iq, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:17:56.665515Z","iopub.execute_input":"2023-02-09T07:17:56.665997Z","iopub.status.idle":"2023-02-09T07:17:56.765935Z","shell.execute_reply.started":"2023-02-09T07:17:56.665957Z","shell.execute_reply":"2023-02-09T07:17:56.763639Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"#creat a object called clf(classiflier)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"clf=LogisticRegression()","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:21:24.561150Z","iopub.execute_input":"2023-02-09T07:21:24.561541Z","iopub.status.idle":"2023-02-09T07:21:24.565800Z","shell.execute_reply.started":"2023-02-09T07:21:24.561510Z","shell.execute_reply":"2023-02-09T07:21:24.564780Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"#model tarining \nclf.fit(x_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:21:31.904073Z","iopub.execute_input":"2023-02-09T07:21:31.904591Z","iopub.status.idle":"2023-02-09T07:21:31.931554Z","shell.execute_reply.started":"2023-02-09T07:21:31.904554Z","shell.execute_reply":"2023-02-09T07:21:31.930125Z"},"trusted":true},"execution_count":60,"outputs":[{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()"},"metadata":{}}]},{"cell_type":"code","source":"#evalti the model ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"clf.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:23:18.739667Z","iopub.execute_input":"2023-02-09T07:23:18.740046Z","iopub.status.idle":"2023-02-09T07:23:18.748479Z","shell.execute_reply.started":"2023-02-09T07:23:18.740017Z","shell.execute_reply":"2023-02-09T07:23:18.747282Z"},"trusted":true},"execution_count":61,"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"array([117,  88, 117, 117, 117,  94,  86,  88, 117, 117, 108,  86,  88,\n       117, 117, 108,  88,  88,  88, 117])"},"metadata":{}}]},{"cell_type":"code","source":"y_test","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:26:40.290789Z","iopub.execute_input":"2023-02-09T07:26:40.291409Z","iopub.status.idle":"2023-02-09T07:26:40.302228Z","shell.execute_reply.started":"2023-02-09T07:26:40.291346Z","shell.execute_reply":"2023-02-09T07:26:40.300592Z"},"trusted":true},"execution_count":63,"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"122     93\n8      110\n152    117\n61      96\n187     91\n184     96\n24      88\n74     109\n77     117\n32     118\n20      98\n143     87\n121    109\n35      96\n196    118\n156    111\n158    110\n31     112\n43      86\n86     117\nName: iq, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"#commpair store the value in y_pred","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred=clf.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:26:48.362372Z","iopub.execute_input":"2023-02-09T07:26:48.362868Z","iopub.status.idle":"2023-02-09T07:26:48.368176Z","shell.execute_reply.started":"2023-02-09T07:26:48.362828Z","shell.execute_reply":"2023-02-09T07:26:48.367317Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"#call the function /matrix which is called acuuracy store ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:29:04.764998Z","iopub.execute_input":"2023-02-09T07:29:04.766273Z","iopub.status.idle":"2023-02-09T07:29:04.773492Z","shell.execute_reply.started":"2023-02-09T07:29:04.766217Z","shell.execute_reply":"2023-02-09T07:29:04.771522Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"accuracy_score(y_test,y_pred)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:30:32.458715Z","iopub.execute_input":"2023-02-09T07:30:32.459135Z","iopub.status.idle":"2023-02-09T07:30:32.470405Z","shell.execute_reply.started":"2023-02-09T07:30:32.459076Z","shell.execute_reply":"2023-02-09T07:30:32.469199Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"0.15"},"metadata":{}}]},{"cell_type":"code","source":"# now how to plot decision boundry ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install mlxtend","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:40:37.429402Z","iopub.execute_input":"2023-02-09T07:40:37.430567Z","iopub.status.idle":"2023-02-09T07:40:46.263154Z","shell.execute_reply.started":"2023-02-09T07:40:37.430522Z","shell.execute_reply":"2023-02-09T07:40:46.262156Z"},"trusted":true},"execution_count":70,"outputs":[{"name":"stdout","text":"Requirement already satisfied: mlxtend in /opt/conda/lib/python3.7/site-packages (0.21.0)\nRequirement already satisfied: joblib>=0.13.2 in /opt/conda/lib/python3.7/site-packages (from mlxtend) (1.0.1)\nRequirement already satisfied: scipy>=1.2.1 in /opt/conda/lib/python3.7/site-packages (from mlxtend) (1.7.3)\nRequirement already satisfied: matplotlib>=3.0.0 in /opt/conda/lib/python3.7/site-packages (from mlxtend) (3.5.2)\nRequirement already satisfied: pandas>=0.24.2 in /opt/conda/lib/python3.7/site-packages (from mlxtend) (1.3.5)\nRequirement already satisfied: scikit-learn>=1.0.2 in /opt/conda/lib/python3.7/site-packages (from mlxtend) (1.0.2)\nRequirement already satisfied: numpy>=1.16.2 in /opt/conda/lib/python3.7/site-packages (from mlxtend) (1.21.6)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.7/site-packages (from mlxtend) (59.8.0)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=3.0.0->mlxtend) (0.11.0)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=3.0.0->mlxtend) (2.8.2)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=3.0.0->mlxtend) (23.0)\nRequirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=3.0.0->mlxtend) (3.0.9)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=3.0.0->mlxtend) (4.33.3)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=3.0.0->mlxtend) (1.4.3)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=3.0.0->mlxtend) (9.1.1)\nRequirement already satisfied: pytz>=2017.3 in /opt/conda/lib/python3.7/site-packages (from pandas>=0.24.2->mlxtend) (2022.1)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from scikit-learn>=1.0.2->mlxtend) (3.1.0)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.7/site-packages (from kiwisolver>=1.0.1->matplotlib>=3.0.0->mlxtend) (4.1.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.7/site-packages (from python-dateutil>=2.7->matplotlib>=3.0.0->mlxtend) (1.15.0)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0mNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"from mlxtend.plotting import plot_decision_regions","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:40:56.811379Z","iopub.execute_input":"2023-02-09T07:40:56.811904Z","iopub.status.idle":"2023-02-09T07:40:56.862844Z","shell.execute_reply.started":"2023-02-09T07:40:56.811849Z","shell.execute_reply":"2023-02-09T07:40:56.861162Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"plot_decision_regions(x_test,y_test.values,clf=clf,legend=2)","metadata":{"execution":{"iopub.status.busy":"2023-02-09T08:10:48.461919Z","iopub.execute_input":"2023-02-09T08:10:48.462318Z","iopub.status.idle":"2023-02-09T08:10:49.124459Z","shell.execute_reply.started":"2023-02-09T08:10:48.462278Z","shell.execute_reply":"2023-02-09T08:10:49.123201Z"},"trusted":true},"execution_count":83,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/mlxtend/plotting/decision_regions.py:306: UserWarning: You passed a edgecolor/edgecolors ('black') for an unfilled marker ('x').  Matplotlib is ignoring the edgecolor in favor of the facecolor.  This behavior may change in the future.\n  **scatter_kwargs\n","output_type":"stream"},{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"pip install matplotlib","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:47:48.469849Z","iopub.execute_input":"2023-02-09T07:47:48.470368Z","iopub.status.idle":"2023-02-09T07:47:57.313908Z","shell.execute_reply.started":"2023-02-09T07:47:48.470328Z","shell.execute_reply":"2023-02-09T07:47:57.312756Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stdout","text":"Requirement already satisfied: matplotlib in /opt/conda/lib/python3.7/site-packages (3.5.2)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.7/site-packages (from matplotlib) (0.11.0)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib) (4.33.3)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib) (1.4.3)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.7/site-packages (from matplotlib) (1.21.6)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.7/site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib) (3.0.9)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib) (9.1.1)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib) (23.0)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.7/site-packages (from kiwisolver>=1.0.1->matplotlib) (4.1.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.7/site-packages (from python-dateutil>=2.7->matplotlib) (1.15.0)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0mNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2023-02-09T07:48:36.902429Z","iopub.execute_input":"2023-02-09T07:48:36.902780Z","iopub.status.idle":"2023-02-09T07:48:36.909537Z","shell.execute_reply.started":"2023-02-09T07:48:36.902752Z","shell.execute_reply":"2023-02-09T07:48:36.907751Z"},"trusted":true},"execution_count":80,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\nxpoints = np.array([1, 8])\nypoints = np.array([3, 10])\n\nplt.plot(xpoints, ypoints)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-02-09T08:03:16.920753Z","iopub.execute_input":"2023-02-09T08:03:16.921169Z","iopub.status.idle":"2023-02-09T08:03:17.069214Z","shell.execute_reply.started":"2023-02-09T08:03:16.921138Z","shell.execute_reply":"2023-02-09T08:03:17.067579Z"},"trusted":true},"execution_count":82,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"# for deployment to website ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#pickle is libary note - in python every thing is in object ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pickle \n\n","metadata":{"execution":{"iopub.status.busy":"2023-02-09T08:55:59.948457Z","iopub.execute_input":"2023-02-09T08:55:59.948954Z","iopub.status.idle":"2023-02-09T08:55:59.954753Z","shell.execute_reply.started":"2023-02-09T08:55:59.948916Z","shell.execute_reply":"2023-02-09T08:55:59.953726Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"#wb - writebinarrymode ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pickle.dump(clf,open('model.pkl','wb'))","metadata":{"execution":{"iopub.status.busy":"2023-02-09T08:59:57.531916Z","iopub.execute_input":"2023-02-09T08:59:57.532797Z","iopub.status.idle":"2023-02-09T08:59:57.539601Z","shell.execute_reply.started":"2023-02-09T08:59:57.532752Z","shell.execute_reply":"2023-02-09T08:59:57.537904Z"},"trusted":true},"execution_count":87,"outputs":[]}]}